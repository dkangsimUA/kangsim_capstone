---
title: "MSDS_Captsone_piepline"
author: "Eastern Kang"
format: html
editor: visual
---

```{r}
pacman::p_load(here, fs, glue, 
               qualtRics, openxlsx, 
               tidyverse, readxl)
```

## Qualtrics API & wrangling

Based on the diagram, the pipeline starts when the Local Experts (`experts`) fills out the consent form. Once `experts` are eligible, next step of the pipeline is custom survey generation.

In order to customize surveys by *geographical location*, we need to access `experts` location information. We need to fetch these location information from the Qualtrics server where the consent form was distributed and results are saved.

Thus, the first step of the R script would be establishing connection between a local machine to the Qualtrics server. The `api_key` can be found from the `account settings` --\> `qualtrics ids` --\> `API token`

```{r add a script for linking Qualtrics}
#Register your credential
#This step needs to be done only once
qualtRics::qualtrics_api_credentials(
  api_key = "ngZZK8IxIeJiOs8Y5U6FtbYoeJbkk4CjofJkGGYu",
  base_url = "uarizona.iad1.qualtrics.com",
  install = TRUE,
  overwrite=TRUE)
```

Once the `api_key` is registered to the local machine, we can **fetch** survey by using the `fetch_survey` function. The `fetch_survey` function is from the `QualtRics` package, which is a function that communicates with the Qualtrics API based on the Survey ID. The unique Survey ID can be retrieved from the Qualtrics User Portal.

```{r}
#download the survey results
fetch_survey(surveyID= "SV_7ZCxh3OmFBpFWu2", 
             #start_date = "YYYY-MM-DD", #Default NULL
             #end_date = "YYYY-MM-DD", #Default NULL
             #limit=integer, #maximum number of responses
             breakout_sets = FALSE,
             add_var_labels = FALSE) %>% 
  filter(Finished == TRUE) %>%  
  # Filters out in-progress surveys
  write_csv( # save survey results 
    file = here("1_registration_survey_output",
                "1_survey_results",
                glue("MEX_registration_output_{Sys.Date()}.csv")),
    na = "")
```

On a side note: The `QualtRics` package has some functions that may be used for retrieving a list of surveys, or by survey ID.

```{r optional}
# Retrieve a list of surveys
surveys <- all_surveys() # retrieve a data frame of all active surveys on Qualtrics

# Retrieve surveyID for a unique survey
my_id <- fetch_id(surveys, "Unique Survey Name")

# Retrieve surveyID for a unique survey
# a<-fetch_distributions("SV_7ZCxh3OmFBpFWu2")
# you can also fetch_distribution_history; this may be useful for confirming generated surveys are properly distributed

```

Once surveys are fetched, we can use the newest survey results by getting a list of files, sort it in descending order, and grab the first object using the following code:

```{r}
# list all survey results
files_csv <- list.files(path= "../survey_workflow/1_registration_survey_output/1_survey_results/")

# retrieve the newest registration survey
files_csv2<- files_csv%>%
  as_tibble()%>%
  dplyr::filter(str_detect(value, "^MEX_"))%>%
  arrange(desc(value))%>%
  as.list()

newest_MEX<- files_csv2$value[1]

```

The survey customization is based on the `experts` location. In this example, Colombia has `dept` and `mun`. We would use the information from the `experts` registration form and *glue* the strings together.

The following script presents a simple wrangling process for filtering `experts` who consented and generates the `surveyname` required for customization.

```{r}
MEX <- read_csv(here("1_registration_survey_output",
                     "1_survey_results", 
                     newest_MEX))%>%
  mutate(across(starts_with("Q7."), as.character),
         across(starts_with("Q8."), as.character))%>%
  MEX_wrangle()%>% #custom function
  dplyr::select(EndDate, ResponseId, name, 
                email, phone, phone_company, 
                exp, industry, citizen, 
                dept= Q6.2, mun)%>%
  filter(!is.na(dept),
         !is.na(mun))%>% #remove empty responses
  mutate(drupal_surveyname = 
           glue("{mun} en {dept}"),
         phone = ifelse(is.na(phone), "Declined", phone))
```

The `drupal_surveyname` created above will be used for customizing the survey.

## Survey generation

Once `drupal_surveyname` has been created, we can create a customized version of survey based on **respondent name** and **municipality of expertise**.

Let's load survey questionnaires. Sample Qualtrics Survey File (**QSF)** file has been provided for the demonstration.

```{r}
svy.2 <- read_file (here(
  "2_governance_survey_generation",
  "1_original_gov_qsf_files",
  "2_MEX_ESP_Governance_s24.qsf"))

#create a variable for the new survey name
name.svy <- "MEX s2.4"
```

We would need to download the responses file, then generate `locations` per respondent

```{r}
#download the responses file
MEX_responses<- read_csv(here(
  "1_registration_survey_output", 
  "1_survey_results", 
  newest_MEX), na="")%>% #load the newest survey result
  mutate(across(starts_with("Q7."), as.character),
         across(starts_with("Q8."), as.character))

#generate location

locations<- MEX_responses %>%
  MEX_wrangle() %>% #refer to `MEX_wrangle_provinces.R`
  dplyr::select(
    ResponseId, EndDate, name, email, lang, 
    dept=Q6.2, mun)%>%
  mutate(ResponseId = factor(ResponseId),
         ResponseId = fct_reorder(ResponseId, EndDate))%>% 
  group_by(ResponseId)%>%
  mutate(id = cur_group_id(), #unique ID per respondent
         id= str_pad(id, 5, pad="0"), #generate zeros
         counter = str_pad(row_number(), 4, pad="0"))%>% #generate counter per location
  ungroup()%>% 
  relocate(ResposneID, id, counter, dept, mun)%>%
  filter(!is.na(dept),
         !is.na(mun))%>%
  mutate(name.svy.id = glue("{name.svy}_{id}_{counter}"),
         drupal_surveyname = glue("{mun} en {dept}"))# create survey name
```

The following script generates individualized surveys:

```{r}
#crates the *.QSF file in a new column
surveys <- locations%>%
  mutate(survey = svy.2, #a copy of survey for each row
         #insert mun name into the survey
         survey = str_replace(
           survey, "Mun-1", 
           glue("{mun} en {dept}")), 
         #insert id into survey name
         survey = str_replace(
           survey, "2 MEX ESP Governance s2.4",
           name.svy.id))%>%
  ungroup()

#create a new folder to place surveys in
dir.crate(here("2_governance_survey_generation",
               "3_generated_gov_qusf_files",
               Sys.Date()))

#create the survey in *.QSF format and save it in the folder 

surveys %>%
  select(survey, name.svy.id)%>%
  purrr::pwalk(function (survey, name.svy.id){
    write_file(
      survey, #save the survey
      here(
        "2_governance_survey_generation",
        "3_generated_gov_qsf_files",
        Sys.Date(),
        glue("{name.svy.id}.qsf")
      ))
  })
```

## Running Code
